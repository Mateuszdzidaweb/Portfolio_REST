{"remainingRequest":"/Users/mateuszdzida/iCloud Drive (Archive)/Documents/code/Portfolio2k21/portfolio2k21/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/mateuszdzida/iCloud Drive (Archive)/Documents/code/Portfolio2k21/portfolio2k21/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/mateuszdzida/iCloud Drive (Archive)/Documents/code/Portfolio2k21/portfolio2k21/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mateuszdzida/iCloud Drive (Archive)/Documents/code/Portfolio2k21/portfolio2k21/src/components/MyPortfolioComponent.vue?vue&type=template&id=5fa479de&","dependencies":[{"path":"/Users/mateuszdzida/iCloud Drive (Archive)/Documents/code/Portfolio2k21/portfolio2k21/src/components/MyPortfolioComponent.vue","mtime":1628533345323},{"path":"/Users/mateuszdzida/iCloud Drive (Archive)/Documents/code/Portfolio2k21/portfolio2k21/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mateuszdzida/iCloud Drive (Archive)/Documents/code/Portfolio2k21/portfolio2k21/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/mateuszdzida/iCloud Drive (Archive)/Documents/code/Portfolio2k21/portfolio2k21/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mateuszdzida/iCloud Drive (Archive)/Documents/code/Portfolio2k21/portfolio2k21/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}