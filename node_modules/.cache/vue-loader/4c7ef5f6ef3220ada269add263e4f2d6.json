{"remainingRequest":"/Users/mateuszdzida/Documents/code/Portfolio2k21/portfolio2k21/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/mateuszdzida/Documents/code/Portfolio2k21/portfolio2k21/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/mateuszdzida/Documents/code/Portfolio2k21/portfolio2k21/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mateuszdzida/Documents/code/Portfolio2k21/portfolio2k21/src/components/MyPortfolio/PortfolioViewComponent.vue?vue&type=template&id=61a2029a&","dependencies":[{"path":"/Users/mateuszdzida/Documents/code/Portfolio2k21/portfolio2k21/src/components/MyPortfolio/PortfolioViewComponent.vue","mtime":1628545434885},{"path":"/Users/mateuszdzida/Documents/code/Portfolio2k21/portfolio2k21/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mateuszdzida/Documents/code/Portfolio2k21/portfolio2k21/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/mateuszdzida/Documents/code/Portfolio2k21/portfolio2k21/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mateuszdzida/Documents/code/Portfolio2k21/portfolio2k21/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}